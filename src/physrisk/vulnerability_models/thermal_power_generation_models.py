from collections import defaultdict
from typing import Iterable, List, Tuple, Union

import numpy as np

from physrisk.api.v1.common import VulnerabilityCurve, VulnerabilityCurves
from physrisk.data.hazard_data_provider import HazardDataBufferZone
from physrisk.kernel.assets import Asset, Cooling, SteamTurbine, ThermalPowerGeneratingAsset, Turbine, TurbineKind
from physrisk.kernel.impact_distrib import ImpactType
from physrisk.kernel.vulnerability_matrix_provider import VulnMatrixProvider
from physrisk.kernel.vulnerability_model import VulnerabilityModel

from ..kernel.curve import ExceedanceCurve
from ..kernel.hazard_event_distrib import HazardEventDistrib
from ..kernel.hazard_model import HazardDataRequest, HazardDataResponse, HazardEventDataResponse
from ..kernel.hazards import CoastalInundation, RiverineInundation
from ..kernel.vulnerability_distrib import VulnerabilityDistrib
from ..kernel.vulnerability_model import (
    applies_to_assets,
    applies_to_events,
    cdf_max_of,
    checked_beta_distrib,
    get_vulnerability_curves_from_resource,
)


class ThermalPowerGenerationInundationModel(VulnerabilityModel):
    # Number of disrupted days per year
    _default_impact_bin_edges = np.array([0, 1, 2, 7, 14, 30, 60, 180, 365])
    _default_resource = "WRI thermal power plant physical climate vulnerability factors"
    _default_buffer_zone = HazardDataBufferZone(delta_deg=0.01, n_grid=5)

    def __init__(
        self,
        *,
        hazard_type: type,
        indicator_id: str,
        resource: str = _default_resource,
        impact_bin_edges=_default_impact_bin_edges,
        buffer_zone=_default_buffer_zone
    ):
        """
        Inundation vulnerability model for thermal power generating assets. Applies to both riverine and coastal inundation.

        Args:
            event_type: Event type.
            model: optional identifier for hazard event model, passed to HazardModel.
            resource: embedded resource identifier used to infer vulnerability matrix.
            impact_bin_edges: specifies the impact (fractional damage/disruption bins).
        """

        curve_set: VulnerabilityCurves = get_vulnerability_curves_from_resource(resource)

        # for this model, key for looking up curves is asset_type, e.g. 'Steam/Recirculating'
        self.vulnerability_curves = dict(
            (c.asset_type, c) for c in curve_set.items if c.event_type == hazard_type.__base__.__name__.lower()
        )
        self.vuln_curves_by_type = defaultdict(list)
        for key in self.vulnerability_curves:
            self.vuln_curves_by_type[TurbineKind[key.split("/")[0]]].append(self.vulnerability_curves[key])

        impact_type = (
            ImpactType.disruption
            if len(self.vulnerability_curves) == 0
            else [ImpactType[self.vulnerability_curves[key].impact_type] for key in self.vulnerability_curves][0]
        )

        # global circulation parameter 'model' is a hint; can be overriden by hazard model
        super().__init__(
            indicator_id=indicator_id,
            hazard_type=hazard_type,
            impact_type=impact_type,
            impact_bin_edges=impact_bin_edges,
            buffer_zone=buffer_zone,
        )

    def get_data_requests(
        self, asset: Asset, *, scenario: str, year: int
    ) -> Union[HazardDataRequest, Iterable[HazardDataRequest]]:
        """Provide the list of hazard event data requests required in order to calculate
        the VulnerabilityDistrib and HazardEventDistrib for the asset."""
        event = HazardDataRequest(
            self.hazard_type,
            asset.longitude,
            asset.latitude,
            scenario=scenario,
            year=year,
            indicator_id=self.indicator_id,
            buffer_zone=self.buffer_zone,
        )
        baseline = HazardDataRequest(
            self.hazard_type,
            asset.longitude,
            asset.latitude,
            scenario="historical",
            year=1989,
            indicator_id=self.indicator_id,
            buffer_zone=self.buffer_zone,
        )
        return event, baseline

    def get_impact_curve(self, intensity_bin_centres: np.ndarray, asset: Asset):
        assert isinstance(asset, ThermalPowerGeneratingAsset)

        curves: List[VulnerabilityCurve] = []
        turbine_type = Turbine.kind(type(asset.turbine))
        if turbine_type == TurbineKind.steam:
            assert isinstance(asset.turbine, SteamTurbine)
            if asset.turbine.cooling is not None:
                cooling_type = Cooling.kind(type(asset.turbine.cooling))
                key = '/'.join([turbine_type, cooling_type])
                if key in self.vulnerability_curves:
                    curves = [self.vulnerability_curves[key]]
            elif turbine_type in self.vuln_curves_by_type:
                curves = self.vuln_curves_by_type[turbine_type]
        elif turbine_type in self.vuln_curves_by_type:
            curves = self.vuln_curves_by_type[turbine_type]

        if len(curves) == 0:
            return VulnMatrixProvider(
                intensity_bin_centres, impact_cdfs=[checked_beta_distrib(0.0, 0.0) for _ in intensity_bin_centres]
            )

        impact_means = np.transpose(
            np.array([np.interp(intensity_bin_centres, curve.intensity, curve.impact_mean) for curve in curves])
        )
        impact_stds = np.transpose(
            np.array(
                [
                    np.interp(intensity_bin_centres, curve.intensity, curve.impact_std)
                    if len(curve.impact_std) == len(curve.intensity)
                    else [0.0 for _ in intensity_bin_centres]
                    for curve in curves
                ]
            )
        )

        return VulnMatrixProvider(
            intensity_bin_centres,
            impact_cdfs=[
                checked_beta_distrib(means[0], stds[0], self.impact_bin_edges[-1])
                if len(means) == 1
                else cdf_max_of(
                    [checked_beta_distrib(mean, std, self.impact_bin_edges[-1]) for mean, std in zip(means, stds)]
                )
                for means, stds in zip(impact_means, impact_stds)
            ],
        )

    def get_distributions(
        self, asset: Asset, event_data_responses: Iterable[HazardDataResponse]
    ) -> Tuple[VulnerabilityDistrib, HazardEventDistrib]:
        assert isinstance(asset, ThermalPowerGeneratingAsset)

        (event_data, baseline_data) = event_data_responses
        assert isinstance(event_data, HazardEventDataResponse)
        assert isinstance(baseline_data, HazardEventDataResponse)

        baseline_curve = ExceedanceCurve(1.0 / baseline_data.return_periods, baseline_data.intensities)
        inundation_protection_level = (
            0.0
            if len(baseline_data.intensities) == 0
            else baseline_curve.get_value(1.0 / asset.get_inundation_protection_return_period())
        )

        intensity_curve = ExceedanceCurve(1.0 / event_data.return_periods, event_data.intensities)
        if intensity_curve.values[0] < inundation_protection_level:
            if inundation_protection_level < intensity_curve.values[-1]:
                intensity_curve = intensity_curve.add_value_point(inundation_protection_level)

        intensity_bin_edges, probs = intensity_curve.get_probability_bins()
        intensity_bin_centres = (intensity_bin_edges[1:] + intensity_bin_edges[:-1]) / 2

        probability_transition_matrix = self.get_impact_curve(intensity_bin_centres, asset).to_prob_matrix(self.impact_bin_edges)
        inundation_protection_matrix = np.diag(np.where(self.impact_bin_edges[1:] <= inundation_protection_level, 0.0, 1.0))
        probability_transition_matrix = np.matmul(probability_transition_matrix, inundation_protection_matrix)

        vul = VulnerabilityDistrib(self.hazard_type, intensity_bin_edges, self.impact_bin_edges, probability_transition_matrix)
        event = HazardEventDistrib(self.hazard_type, intensity_bin_edges, probs)

        return vul, event


@applies_to_events([CoastalInundation])
@applies_to_assets([ThermalPowerGeneratingAsset])
class ThermalPowerGenerationCoastalInundationModel(ThermalPowerGenerationInundationModel):
    def __init__(
        self,
        *,
        indicator_id: str = "flood_depth",
        resource: str = ThermalPowerGenerationInundationModel._default_resource,
        impact_bin_edges=ThermalPowerGenerationInundationModel._default_impact_bin_edges
    ):
        # by default include subsidence and 95% sea-level rise
        super().__init__(
            hazard_type=CoastalInundation,
            indicator_id=indicator_id,
            resource=resource,
            impact_bin_edges=impact_bin_edges,
        )


@applies_to_events([RiverineInundation])
@applies_to_assets([ThermalPowerGeneratingAsset])
class ThermalPowerGenerationRiverineInundationModel(ThermalPowerGenerationInundationModel):
    def __init__(
        self,
        *,
        indicator_id: str = "flood_depth",
        resource: str = ThermalPowerGenerationInundationModel._default_resource,
        impact_bin_edges=ThermalPowerGenerationInundationModel._default_impact_bin_edges
    ):
        # by default request HazardModel to use "MIROC-ESM-CHEM" GCM
        super().__init__(
            hazard_type=RiverineInundation,
            indicator_id=indicator_id,
            resource=resource,
            impact_bin_edges=impact_bin_edges,
        )
